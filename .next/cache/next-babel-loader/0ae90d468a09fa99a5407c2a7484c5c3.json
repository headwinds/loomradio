{"ast":null,"code":"var _jsxFileName = \"/Users/braflow/loomradio/src/Player.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { propTypes, defaultProps } from './props';\nimport { isEqual } from './utils';\nconst SEEK_ON_PLAY_EXPIRY = 5000;\nexport default class Player extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"mounted\", false);\n\n    _defineProperty(this, \"isReady\", false);\n\n    _defineProperty(this, \"isPlaying\", false);\n\n    _defineProperty(this, \"isLoading\", true);\n\n    _defineProperty(this, \"loadOnReady\", null);\n\n    _defineProperty(this, \"startOnPlay\", true);\n\n    _defineProperty(this, \"seekOnPlay\", null);\n\n    _defineProperty(this, \"onDurationCalled\", false);\n\n    _defineProperty(this, \"getInternalPlayer\", key => {\n      if (!this.player) return null;\n      return this.player[key];\n    });\n\n    _defineProperty(this, \"progress\", () => {\n      if (this.props.url && this.player && this.isReady) {\n        const playedSeconds = this.getCurrentTime() || 0;\n        const loadedSeconds = this.getSecondsLoaded();\n        const duration = this.getDuration();\n\n        if (duration) {\n          const progress = {\n            playedSeconds,\n            played: playedSeconds / duration\n          };\n\n          if (loadedSeconds !== null) {\n            progress.loadedSeconds = loadedSeconds;\n            progress.loaded = loadedSeconds / duration;\n          } // Only call onProgress if values have changed\n\n\n          if (progress.played !== this.prevPlayed || progress.loaded !== this.prevLoaded) {\n            this.props.onProgress(progress);\n          }\n\n          this.prevPlayed = progress.played;\n          this.prevLoaded = progress.loaded;\n        }\n      }\n\n      this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval);\n    });\n\n    _defineProperty(this, \"onReady\", () => {\n      if (!this.mounted) return;\n      this.isReady = true;\n      this.isLoading = false;\n      const {\n        onReady,\n        playing,\n        volume,\n        muted\n      } = this.props;\n      onReady();\n\n      if (!muted && volume !== null) {\n        this.player.setVolume(volume);\n      }\n\n      if (this.loadOnReady) {\n        this.player.load(this.loadOnReady, true);\n        this.loadOnReady = null;\n      } else if (playing) {\n        this.player.play();\n      }\n\n      this.onDurationCheck();\n    });\n\n    _defineProperty(this, \"onPlay\", () => {\n      this.isPlaying = true;\n      this.isLoading = false;\n      const {\n        onStart,\n        onPlay,\n        playbackRate\n      } = this.props;\n\n      if (this.startOnPlay) {\n        if (this.player.setPlaybackRate) {\n          this.player.setPlaybackRate(playbackRate);\n        }\n\n        onStart();\n        this.startOnPlay = false;\n      }\n\n      onPlay();\n\n      if (this.seekOnPlay) {\n        this.seekTo(this.seekOnPlay);\n        this.seekOnPlay = null;\n      }\n\n      this.onDurationCheck();\n    });\n\n    _defineProperty(this, \"onPause\", e => {\n      this.isPlaying = false;\n\n      if (!this.isLoading) {\n        this.props.onPause(e);\n      }\n    });\n\n    _defineProperty(this, \"onEnded\", () => {\n      const {\n        activePlayer,\n        loop,\n        onEnded\n      } = this.props;\n\n      if (activePlayer.loopOnEnded && loop) {\n        this.seekTo(0);\n      }\n\n      if (!loop) {\n        this.isPlaying = false;\n        onEnded();\n      }\n    });\n\n    _defineProperty(this, \"onError\", e => {\n      this.isLoading = false;\n      this.props.onError(e);\n    });\n\n    _defineProperty(this, \"onDurationCheck\", () => {\n      clearTimeout(this.durationCheckTimeout);\n      const duration = this.getDuration();\n\n      if (duration) {\n        if (!this.onDurationCalled) {\n          this.props.onDuration(duration);\n          this.onDurationCalled = true;\n        }\n      } else {\n        this.durationCheckTimeout = setTimeout(this.onDurationCheck, 100);\n      }\n    });\n\n    _defineProperty(this, \"onLoaded\", () => {\n      // Sometimes we know loading has stopped but onReady/onPlay are never called\n      // so this provides a way for players to avoid getting stuck\n      this.isLoading = false;\n    });\n\n    _defineProperty(this, \"ref\", player => {\n      if (player) {\n        this.player = player;\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.player.load(this.props.url);\n    this.progress();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.progressTimeout);\n    clearTimeout(this.durationCheckTimeout);\n\n    if (this.isReady) {\n      this.player.stop();\n    }\n\n    if (this.player.disablePIP) {\n      this.player.disablePIP();\n    }\n\n    this.mounted = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Invoke player methods based on incoming props\n    const {\n      url,\n      playing,\n      volume,\n      muted,\n      playbackRate,\n      pip,\n      loop\n    } = this.props;\n\n    if (!isEqual(url, nextProps.url)) {\n      if (this.isLoading) {\n        console.warn(`ReactPlayer: the attempt to load ${nextProps.url} is being deferred until the player has loaded`);\n        this.loadOnReady = nextProps.url;\n        return;\n      }\n\n      this.isLoading = true;\n      this.startOnPlay = true;\n      this.onDurationCalled = false;\n      this.player.load(nextProps.url, this.isReady);\n    }\n\n    if (!playing && nextProps.playing && !this.isPlaying) {\n      this.player.play();\n    }\n\n    if (playing && !nextProps.playing && this.isPlaying) {\n      this.player.pause();\n    }\n\n    if (!pip && nextProps.pip && this.player.enablePIP) {\n      this.player.enablePIP();\n    } else if (pip && !nextProps.pip && this.player.disablePIP) {\n      this.player.disablePIP();\n    }\n\n    if (volume !== nextProps.volume && nextProps.volume !== null) {\n      this.player.setVolume(nextProps.volume);\n    }\n\n    if (muted !== nextProps.muted) {\n      if (nextProps.muted) {\n        this.player.mute();\n      } else {\n        this.player.unmute();\n\n        if (nextProps.volume !== null) {\n          // Set volume next tick to fix a bug with DailyMotion\n          setTimeout(() => this.player.setVolume(nextProps.volume));\n        }\n      }\n    }\n\n    if (playbackRate !== nextProps.playbackRate && this.player.setPlaybackRate) {\n      this.player.setPlaybackRate(nextProps.playbackRate);\n    }\n\n    if (loop !== nextProps.loop && this.player.setLoop) {\n      this.player.setLoop(nextProps.loop);\n    }\n  }\n\n  getDuration() {\n    if (!this.isReady) return null;\n    return this.player.getDuration();\n  }\n\n  getCurrentTime() {\n    if (!this.isReady) return null;\n    return this.player.getCurrentTime();\n  }\n\n  getSecondsLoaded() {\n    if (!this.isReady) return null;\n    return this.player.getSecondsLoaded();\n  }\n\n  seekTo(amount, type) {\n    // When seeking before player is ready, store value and seek later\n    if (!this.isReady && amount !== 0) {\n      this.seekOnPlay = amount;\n      setTimeout(() => {\n        this.seekOnPlay = null;\n      }, SEEK_ON_PLAY_EXPIRY);\n      return;\n    }\n\n    const isFraction = !type ? amount > 0 && amount < 1 : type === 'fraction';\n\n    if (isFraction) {\n      // Convert fraction to seconds based on duration\n      const duration = this.player.getDuration();\n\n      if (!duration) {\n        console.warn('ReactPlayer: could not seek using fraction – duration not yet available');\n        return;\n      }\n\n      this.player.seekTo(duration * amount);\n      return;\n    }\n\n    this.player.seekTo(amount);\n  }\n\n  render() {\n    const Player = this.props.activePlayer;\n\n    if (!Player) {\n      return null;\n    }\n\n    return __jsx(Player, _extends({}, this.props, {\n      ref: this.ref,\n      onReady: this.onReady,\n      onPlay: this.onPlay,\n      onPause: this.onPause,\n      onEnded: this.onEnded,\n      onLoaded: this.onLoaded,\n      onError: this.onError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\n_defineProperty(Player, \"displayName\", 'Player');\n\n_defineProperty(Player, \"propTypes\", propTypes);\n\n_defineProperty(Player, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["/Users/braflow/loomradio/src/Player.js"],"names":["React","Component","propTypes","defaultProps","isEqual","SEEK_ON_PLAY_EXPIRY","Player","key","player","props","url","isReady","playedSeconds","getCurrentTime","loadedSeconds","getSecondsLoaded","duration","getDuration","progress","played","loaded","prevPlayed","prevLoaded","onProgress","progressTimeout","setTimeout","progressFrequency","progressInterval","mounted","isLoading","onReady","playing","volume","muted","setVolume","loadOnReady","load","play","onDurationCheck","isPlaying","onStart","onPlay","playbackRate","startOnPlay","setPlaybackRate","seekOnPlay","seekTo","e","onPause","activePlayer","loop","onEnded","loopOnEnded","onError","clearTimeout","durationCheckTimeout","onDurationCalled","onDuration","componentDidMount","componentWillUnmount","stop","disablePIP","componentWillReceiveProps","nextProps","pip","console","warn","pause","enablePIP","mute","unmute","setLoop","amount","type","isFraction","render","ref","onLoaded"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { propTypes, defaultProps } from './props'\nimport { isEqual } from './utils'\n\nconst SEEK_ON_PLAY_EXPIRY = 5000\n\nexport default class Player extends Component {\n  static displayName = 'Player'\n  static propTypes = propTypes\n  static defaultProps = defaultProps\n  mounted = false\n  isReady = false\n  isPlaying = false // Track playing state internally to prevent bugs\n  isLoading = true // Use isLoading to prevent onPause when switching URL\n  loadOnReady = null\n  startOnPlay = true\n  seekOnPlay = null\n  onDurationCalled = false\n  componentDidMount () {\n    this.mounted = true\n    this.player.load(this.props.url)\n    this.progress()\n  }\n  componentWillUnmount () {\n    clearTimeout(this.progressTimeout)\n    clearTimeout(this.durationCheckTimeout)\n    if (this.isReady) {\n      this.player.stop()\n    }\n    if (this.player.disablePIP) {\n      this.player.disablePIP()\n    }\n    this.mounted = false\n  }\n  componentWillReceiveProps (nextProps) {\n    // Invoke player methods based on incoming props\n    const { url, playing, volume, muted, playbackRate, pip, loop } = this.props\n    if (!isEqual(url, nextProps.url)) {\n      if (this.isLoading) {\n        console.warn(`ReactPlayer: the attempt to load ${nextProps.url} is being deferred until the player has loaded`)\n        this.loadOnReady = nextProps.url\n        return\n      }\n      this.isLoading = true\n      this.startOnPlay = true\n      this.onDurationCalled = false\n      this.player.load(nextProps.url, this.isReady)\n    }\n    if (!playing && nextProps.playing && !this.isPlaying) {\n      this.player.play()\n    }\n    if (playing && !nextProps.playing && this.isPlaying) {\n      this.player.pause()\n    }\n    if (!pip && nextProps.pip && this.player.enablePIP) {\n      this.player.enablePIP()\n    } else if (pip && !nextProps.pip && this.player.disablePIP) {\n      this.player.disablePIP()\n    }\n    if (volume !== nextProps.volume && nextProps.volume !== null) {\n      this.player.setVolume(nextProps.volume)\n    }\n    if (muted !== nextProps.muted) {\n      if (nextProps.muted) {\n        this.player.mute()\n      } else {\n        this.player.unmute()\n        if (nextProps.volume !== null) {\n          // Set volume next tick to fix a bug with DailyMotion\n          setTimeout(() => this.player.setVolume(nextProps.volume))\n        }\n      }\n    }\n    if (playbackRate !== nextProps.playbackRate && this.player.setPlaybackRate) {\n      this.player.setPlaybackRate(nextProps.playbackRate)\n    }\n    if (loop !== nextProps.loop && this.player.setLoop) {\n      this.player.setLoop(nextProps.loop)\n    }\n  }\n  getDuration () {\n    if (!this.isReady) return null\n    return this.player.getDuration()\n  }\n  getCurrentTime () {\n    if (!this.isReady) return null\n    return this.player.getCurrentTime()\n  }\n  getSecondsLoaded () {\n    if (!this.isReady) return null\n    return this.player.getSecondsLoaded()\n  }\n  getInternalPlayer = (key) => {\n    if (!this.player) return null\n    return this.player[key]\n  }\n  progress = () => {\n    if (this.props.url && this.player && this.isReady) {\n      const playedSeconds = this.getCurrentTime() || 0\n      const loadedSeconds = this.getSecondsLoaded()\n      const duration = this.getDuration()\n      if (duration) {\n        const progress = {\n          playedSeconds,\n          played: playedSeconds / duration\n        }\n        if (loadedSeconds !== null) {\n          progress.loadedSeconds = loadedSeconds\n          progress.loaded = loadedSeconds / duration\n        }\n        // Only call onProgress if values have changed\n        if (progress.played !== this.prevPlayed || progress.loaded !== this.prevLoaded) {\n          this.props.onProgress(progress)\n        }\n        this.prevPlayed = progress.played\n        this.prevLoaded = progress.loaded\n      }\n    }\n    this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval)\n  }\n  seekTo (amount, type) {\n    // When seeking before player is ready, store value and seek later\n    if (!this.isReady && amount !== 0) {\n      this.seekOnPlay = amount\n      setTimeout(() => { this.seekOnPlay = null }, SEEK_ON_PLAY_EXPIRY)\n      return\n    }\n    const isFraction = !type ? (amount > 0 && amount < 1) : type === 'fraction'\n    if (isFraction) {\n      // Convert fraction to seconds based on duration\n      const duration = this.player.getDuration()\n      if (!duration) {\n        console.warn('ReactPlayer: could not seek using fraction – duration not yet available')\n        return\n      }\n      this.player.seekTo(duration * amount)\n      return\n    }\n    this.player.seekTo(amount)\n  }\n  onReady = () => {\n    if (!this.mounted) return\n    this.isReady = true\n    this.isLoading = false\n    const { onReady, playing, volume, muted } = this.props\n    onReady()\n    if (!muted && volume !== null) {\n      this.player.setVolume(volume)\n    }\n    if (this.loadOnReady) {\n      this.player.load(this.loadOnReady, true)\n      this.loadOnReady = null\n    } else if (playing) {\n      this.player.play()\n    }\n    this.onDurationCheck()\n  }\n  onPlay = () => {\n    this.isPlaying = true\n    this.isLoading = false\n    const { onStart, onPlay, playbackRate } = this.props\n    if (this.startOnPlay) {\n      if (this.player.setPlaybackRate) {\n        this.player.setPlaybackRate(playbackRate)\n      }\n      onStart()\n      this.startOnPlay = false\n    }\n    onPlay()\n    if (this.seekOnPlay) {\n      this.seekTo(this.seekOnPlay)\n      this.seekOnPlay = null\n    }\n    this.onDurationCheck()\n  }\n  onPause = (e) => {\n    this.isPlaying = false\n    if (!this.isLoading) {\n      this.props.onPause(e)\n    }\n  }\n  onEnded = () => {\n    const { activePlayer, loop, onEnded } = this.props\n    if (activePlayer.loopOnEnded && loop) {\n      this.seekTo(0)\n    }\n    if (!loop) {\n      this.isPlaying = false\n      onEnded()\n    }\n  }\n  onError = (e) => {\n    this.isLoading = false\n    this.props.onError(e)\n  }\n  onDurationCheck = () => {\n    clearTimeout(this.durationCheckTimeout)\n    const duration = this.getDuration()\n    if (duration) {\n      if (!this.onDurationCalled) {\n        this.props.onDuration(duration)\n        this.onDurationCalled = true\n      }\n    } else {\n      this.durationCheckTimeout = setTimeout(this.onDurationCheck, 100)\n    }\n  }\n  onLoaded = () => {\n    // Sometimes we know loading has stopped but onReady/onPlay are never called\n    // so this provides a way for players to avoid getting stuck\n    this.isLoading = false\n  }\n  ref = player => {\n    if (player) {\n      this.player = player\n    }\n  }\n  render () {\n    const Player = this.props.activePlayer\n    if (!Player) {\n      return null\n    }\n    return (\n      <Player\n        {...this.props}\n        ref={this.ref}\n        onReady={this.onReady}\n        onPlay={this.onPlay}\n        onPause={this.onPause}\n        onEnded={this.onEnded}\n        onLoaded={this.onLoaded}\n        onError={this.onError}\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}