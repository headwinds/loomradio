{"ast":null,"code":"var _jsxFileName = \"/Users/braflow/loomradio/src/preload.js\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport Player from './Player';\nimport { YouTube } from './players/YouTube';\nimport { SoundCloud } from './players/SoundCloud';\nimport { Vimeo } from './players/Vimeo';\nimport { DailyMotion } from './players/DailyMotion';\nvar PRELOAD_PLAYERS = [{\n  Player: YouTube,\n  configKey: 'youtube',\n  url: 'https://www.youtube.com/watch?v=GlCmAC4MHek'\n}, {\n  Player: SoundCloud,\n  configKey: 'soundcloud',\n  url: 'https://soundcloud.com/seucheu/john-cage-433-8-bit-version'\n}, {\n  Player: Vimeo,\n  configKey: 'vimeo',\n  url: 'https://vimeo.com/300970506'\n}, {\n  Player: DailyMotion,\n  configKey: 'dailymotion',\n  url: 'http://www.dailymotion.com/video/xqdpyk'\n}];\nexport default function renderPreloadPlayers(url, controls, config) {\n  var players = [];\n\n  var _iterator = _createForOfIteratorHelper(PRELOAD_PLAYERS),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var player = _step.value;\n\n      if (!player.Player.canPlay(url) && config[player.configKey].preload) {\n        players.push(__jsx(Player, {\n          key: player.Player.displayName,\n          activePlayer: player.Player,\n          url: player.url,\n          controls: controls,\n          playing: true,\n          muted: true,\n          style: {\n            display: 'none'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 9\n          }\n        }));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return players;\n}","map":{"version":3,"sources":["/Users/braflow/loomradio/src/preload.js"],"names":["React","Player","YouTube","SoundCloud","Vimeo","DailyMotion","PRELOAD_PLAYERS","configKey","url","renderPreloadPlayers","controls","config","players","player","canPlay","preload","push","displayName","display"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,IAAMC,eAAe,GAAG,CACtB;AACEL,EAAAA,MAAM,EAAEC,OADV;AAEEK,EAAAA,SAAS,EAAE,SAFb;AAGEC,EAAAA,GAAG,EAAE;AAHP,CADsB,EAMtB;AACEP,EAAAA,MAAM,EAAEE,UADV;AAEEI,EAAAA,SAAS,EAAE,YAFb;AAGEC,EAAAA,GAAG,EAAE;AAHP,CANsB,EAWtB;AACEP,EAAAA,MAAM,EAAEG,KADV;AAEEG,EAAAA,SAAS,EAAE,OAFb;AAGEC,EAAAA,GAAG,EAAE;AAHP,CAXsB,EAgBtB;AACEP,EAAAA,MAAM,EAAEI,WADV;AAEEE,EAAAA,SAAS,EAAE,aAFb;AAGEC,EAAAA,GAAG,EAAE;AAHP,CAhBsB,CAAxB;AAuBA,eAAe,SAASC,oBAAT,CAA+BD,GAA/B,EAAoCE,QAApC,EAA8CC,MAA9C,EAAsD;AACnE,MAAMC,OAAO,GAAG,EAAhB;;AADmE,6CAGhDN,eAHgD;AAAA;;AAAA;AAGnE,wDAAoC;AAAA,UAA3BO,MAA2B;;AAClC,UAAI,CAACA,MAAM,CAACZ,MAAP,CAAca,OAAd,CAAsBN,GAAtB,CAAD,IAA+BG,MAAM,CAACE,MAAM,CAACN,SAAR,CAAN,CAAyBQ,OAA5D,EAAqE;AACnEH,QAAAA,OAAO,CAACI,IAAR,CACE,MAAC,MAAD;AACE,UAAA,GAAG,EAAEH,MAAM,CAACZ,MAAP,CAAcgB,WADrB;AAEE,UAAA,YAAY,EAAEJ,MAAM,CAACZ,MAFvB;AAGE,UAAA,GAAG,EAAEY,MAAM,CAACL,GAHd;AAIE,UAAA,QAAQ,EAAEE,QAJZ;AAKE,UAAA,OAAO,MALT;AAME,UAAA,KAAK,MANP;AAOE,UAAA,KAAK,EAAE;AAAEQ,YAAAA,OAAO,EAAE;AAAX,WAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;AACF;AAjBkE;AAAA;AAAA;AAAA;AAAA;;AAmBnE,SAAON,OAAP;AACD","sourcesContent":["import React from 'react'\n\nimport Player from './Player'\nimport { YouTube } from './players/YouTube'\nimport { SoundCloud } from './players/SoundCloud'\nimport { Vimeo } from './players/Vimeo'\nimport { DailyMotion } from './players/DailyMotion'\n\nconst PRELOAD_PLAYERS = [\n  {\n    Player: YouTube,\n    configKey: 'youtube',\n    url: 'https://www.youtube.com/watch?v=GlCmAC4MHek'\n  },\n  {\n    Player: SoundCloud,\n    configKey: 'soundcloud',\n    url: 'https://soundcloud.com/seucheu/john-cage-433-8-bit-version'\n  },\n  {\n    Player: Vimeo,\n    configKey: 'vimeo',\n    url: 'https://vimeo.com/300970506'\n  },\n  {\n    Player: DailyMotion,\n    configKey: 'dailymotion',\n    url: 'http://www.dailymotion.com/video/xqdpyk'\n  }\n]\n\nexport default function renderPreloadPlayers (url, controls, config) {\n  const players = []\n\n  for (let player of PRELOAD_PLAYERS) {\n    if (!player.Player.canPlay(url) && config[player.configKey].preload) {\n      players.push(\n        <Player\n          key={player.Player.displayName}\n          activePlayer={player.Player}\n          url={player.url}\n          controls={controls}\n          playing\n          muted\n          style={{ display: 'none' }}\n        />\n      )\n    }\n  }\n\n  return players\n}\n"]},"metadata":{},"sourceType":"module"}