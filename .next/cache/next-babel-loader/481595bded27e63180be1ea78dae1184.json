{"ast":null,"code":"var _jsxFileName = \"/Users/braflow/loomradio/src/players/Twitch.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { callPlayer, getSDK, randomString } from '../utils';\nimport createSinglePlayer from '../singlePlayer';\nconst SDK_URL = 'https://player.twitch.tv/js/embed/v1.js';\nconst SDK_GLOBAL = 'Twitch';\nconst MATCH_VIDEO_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nconst MATCH_CHANNEL_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-z0-9_]+)($|\\?)/;\nconst PLAYER_ID_PREFIX = 'twitch-player-';\nexport class Twitch extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"callPlayer\", callPlayer);\n\n    _defineProperty(this, \"playerID\", PLAYER_ID_PREFIX + randomString());\n\n    _defineProperty(this, \"mute\", () => {\n      this.callPlayer('setMuted', true);\n    });\n\n    _defineProperty(this, \"unmute\", () => {\n      this.callPlayer('setMuted', false);\n    });\n  }\n\n  load(url, isReady) {\n    const {\n      playsinline,\n      onError,\n      config\n    } = this.props;\n    const isChannel = MATCH_CHANNEL_URL.test(url);\n    const id = isChannel ? url.match(MATCH_CHANNEL_URL)[1] : url.match(MATCH_VIDEO_URL)[1];\n\n    if (isReady) {\n      if (isChannel) {\n        this.player.setChannel(id);\n      } else {\n        this.player.setVideo('v' + id);\n      }\n\n      return;\n    }\n\n    getSDK(SDK_URL, SDK_GLOBAL).then(Twitch => {\n      this.player = new Twitch.Player(this.playerID, _objectSpread({\n        video: isChannel ? '' : id,\n        channel: isChannel ? id : '',\n        height: '100%',\n        width: '100%',\n        playsinline: playsinline,\n        autoplay: this.props.playing,\n        muted: this.props.muted\n      }, config.twitch.options));\n      const {\n        READY,\n        PLAYING,\n        PAUSE,\n        ENDED\n      } = Twitch.Player;\n      this.player.addEventListener(READY, this.props.onReady);\n      this.player.addEventListener(PLAYING, this.props.onPlay);\n      this.player.addEventListener(PAUSE, this.props.onPause);\n      this.player.addEventListener(ENDED, this.props.onEnded);\n    }, onError);\n  }\n\n  play() {\n    this.callPlayer('play');\n  }\n\n  pause() {\n    this.callPlayer('pause');\n  }\n\n  stop() {\n    this.callPlayer('pause');\n  }\n\n  seekTo(seconds) {\n    this.callPlayer('seek', seconds);\n  }\n\n  setVolume(fraction) {\n    this.callPlayer('setVolume', fraction);\n  }\n\n  getDuration() {\n    return this.callPlayer('getDuration');\n  }\n\n  getCurrentTime() {\n    return this.callPlayer('getCurrentTime');\n  }\n\n  getSecondsLoaded() {\n    return null;\n  }\n\n  render() {\n    const style = {\n      width: '100%',\n      height: '100%'\n    };\n    return __jsx(\"div\", {\n      style: style,\n      id: this.playerID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\n_defineProperty(Twitch, \"displayName\", 'Twitch');\n\n_defineProperty(Twitch, \"canPlay\", url => MATCH_VIDEO_URL.test(url) || MATCH_CHANNEL_URL.test(url));\n\n_defineProperty(Twitch, \"loopOnEnded\", true);\n\nexport default createSinglePlayer(Twitch);","map":{"version":3,"sources":["/Users/braflow/loomradio/src/players/Twitch.js"],"names":["React","Component","callPlayer","getSDK","randomString","createSinglePlayer","SDK_URL","SDK_GLOBAL","MATCH_VIDEO_URL","MATCH_CHANNEL_URL","PLAYER_ID_PREFIX","Twitch","load","url","isReady","playsinline","onError","config","props","isChannel","test","id","match","player","setChannel","setVideo","then","Player","playerID","video","channel","height","width","autoplay","playing","muted","twitch","options","READY","PLAYING","PAUSE","ENDED","addEventListener","onReady","onPlay","onPause","onEnded","play","pause","stop","seekTo","seconds","setVolume","fraction","getDuration","getCurrentTime","getSecondsLoaded","render","style"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, randomString } from '../utils'\nimport createSinglePlayer from '../singlePlayer'\n\nconst SDK_URL = 'https://player.twitch.tv/js/embed/v1.js'\nconst SDK_GLOBAL = 'Twitch'\nconst MATCH_VIDEO_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/\nconst MATCH_CHANNEL_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-z0-9_]+)($|\\?)/\nconst PLAYER_ID_PREFIX = 'twitch-player-'\n\nexport class Twitch extends Component {\n  static displayName = 'Twitch'\n  static canPlay = url => MATCH_VIDEO_URL.test(url) || MATCH_CHANNEL_URL.test(url)\n  static loopOnEnded = true\n\n  callPlayer = callPlayer\n  playerID = PLAYER_ID_PREFIX + randomString()\n  load (url, isReady) {\n    const { playsinline, onError, config } = this.props\n    const isChannel = MATCH_CHANNEL_URL.test(url)\n    const id = isChannel ? url.match(MATCH_CHANNEL_URL)[1] : url.match(MATCH_VIDEO_URL)[1]\n    if (isReady) {\n      if (isChannel) {\n        this.player.setChannel(id)\n      } else {\n        this.player.setVideo('v' + id)\n      }\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL).then(Twitch => {\n      this.player = new Twitch.Player(this.playerID, {\n        video: isChannel ? '' : id,\n        channel: isChannel ? id : '',\n        height: '100%',\n        width: '100%',\n        playsinline: playsinline,\n        autoplay: this.props.playing,\n        muted: this.props.muted,\n        ...config.twitch.options\n      })\n      const { READY, PLAYING, PAUSE, ENDED } = Twitch.Player\n      this.player.addEventListener(READY, this.props.onReady)\n      this.player.addEventListener(PLAYING, this.props.onPlay)\n      this.player.addEventListener(PAUSE, this.props.onPause)\n      this.player.addEventListener(ENDED, this.props.onEnded)\n    }, onError)\n  }\n  play () {\n    this.callPlayer('play')\n  }\n  pause () {\n    this.callPlayer('pause')\n  }\n  stop () {\n    this.callPlayer('pause')\n  }\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n  mute = () => {\n    this.callPlayer('setMuted', true)\n  }\n  unmute = () => {\n    this.callPlayer('setMuted', false)\n  }\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n  getSecondsLoaded () {\n    return null\n  }\n  render () {\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    return (\n      <div style={style} id={this.playerID} />\n    )\n  }\n}\n\nexport default createSinglePlayer(Twitch)\n"]},"metadata":{},"sourceType":"module"}