{"ast":null,"code":"var _jsxFileName = \"/Users/braflow/loomradio/src/players/Mixcloud.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { callPlayer, getSDK, queryString } from '../utils';\nimport createSinglePlayer from '../singlePlayer';\nconst SDK_URL = '//widget.mixcloud.com/media/js/widgetApi.js';\nconst SDK_GLOBAL = 'Mixcloud';\nconst MATCH_URL = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nexport class Mixcloud extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"callPlayer\", callPlayer);\n\n    _defineProperty(this, \"duration\", null);\n\n    _defineProperty(this, \"currentTime\", null);\n\n    _defineProperty(this, \"secondsLoaded\", null);\n\n    _defineProperty(this, \"mute\", () => {// No volume support\n    });\n\n    _defineProperty(this, \"unmute\", () => {// No volume support\n    });\n\n    _defineProperty(this, \"ref\", iframe => {\n      this.iframe = iframe;\n    });\n  }\n\n  load(url) {\n    getSDK(SDK_URL, SDK_GLOBAL).then(Mixcloud => {\n      this.player = Mixcloud.PlayerWidget(this.iframe);\n      this.player.ready.then(() => {\n        this.player.events.play.on(this.props.onPlay);\n        this.player.events.pause.on(this.props.onPause);\n        this.player.events.ended.on(this.props.onEnded);\n        this.player.events.error.on(this.props.error);\n        this.player.events.progress.on((seconds, duration) => {\n          this.currentTime = seconds;\n          this.duration = duration;\n        });\n        this.props.onReady();\n      });\n    }, this.props.onError);\n  }\n\n  play() {\n    this.callPlayer('play');\n  }\n\n  pause() {\n    this.callPlayer('pause');\n  }\n\n  stop() {// Nothing to do\n  }\n\n  seekTo(seconds) {\n    this.callPlayer('seek', seconds);\n  }\n\n  setVolume(fraction) {// No volume support\n  }\n\n  getDuration() {\n    return this.duration;\n  }\n\n  getCurrentTime() {\n    return this.currentTime;\n  }\n\n  getSecondsLoaded() {\n    return null;\n  }\n\n  render() {\n    const {\n      url,\n      config\n    } = this.props;\n    const id = url.match(MATCH_URL)[1];\n    const style = {\n      width: '100%',\n      height: '100%'\n    };\n    const query = queryString(_objectSpread(_objectSpread({}, config.mixcloud.options), {}, {\n      feed: `/${id}/`\n    })); // We have to give the iframe a key here to prevent a\n    // weird dialog appearing when loading a new track\n\n    return __jsx(\"iframe\", {\n      key: id,\n      ref: this.ref,\n      style: style,\n      src: `https://www.mixcloud.com/widget/iframe/?${query}`,\n      frameBorder: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\n_defineProperty(Mixcloud, \"displayName\", 'Mixcloud');\n\n_defineProperty(Mixcloud, \"canPlay\", url => MATCH_URL.test(url));\n\n_defineProperty(Mixcloud, \"loopOnEnded\", true);\n\nexport default createSinglePlayer(Mixcloud);","map":{"version":3,"sources":["/Users/braflow/loomradio/src/players/Mixcloud.js"],"names":["React","Component","callPlayer","getSDK","queryString","createSinglePlayer","SDK_URL","SDK_GLOBAL","MATCH_URL","Mixcloud","iframe","load","url","then","player","PlayerWidget","ready","events","play","on","props","onPlay","pause","onPause","ended","onEnded","error","progress","seconds","duration","currentTime","onReady","onError","stop","seekTo","setVolume","fraction","getDuration","getCurrentTime","getSecondsLoaded","render","config","id","match","style","width","height","query","mixcloud","options","feed","ref","test"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, queryString } from '../utils'\nimport createSinglePlayer from '../singlePlayer'\n\nconst SDK_URL = '//widget.mixcloud.com/media/js/widgetApi.js'\nconst SDK_GLOBAL = 'Mixcloud'\nconst MATCH_URL = /mixcloud\\.com\\/([^/]+\\/[^/]+)/\n\nexport class Mixcloud extends Component {\n  static displayName = 'Mixcloud'\n  static canPlay = url => MATCH_URL.test(url)\n  static loopOnEnded = true\n\n  callPlayer = callPlayer\n  duration = null\n  currentTime = null\n  secondsLoaded = null\n  load (url) {\n    getSDK(SDK_URL, SDK_GLOBAL).then(Mixcloud => {\n      this.player = Mixcloud.PlayerWidget(this.iframe)\n      this.player.ready.then(() => {\n        this.player.events.play.on(this.props.onPlay)\n        this.player.events.pause.on(this.props.onPause)\n        this.player.events.ended.on(this.props.onEnded)\n        this.player.events.error.on(this.props.error)\n        this.player.events.progress.on((seconds, duration) => {\n          this.currentTime = seconds\n          this.duration = duration\n        })\n        this.props.onReady()\n      })\n    }, this.props.onError)\n  }\n  play () {\n    this.callPlayer('play')\n  }\n  pause () {\n    this.callPlayer('pause')\n  }\n  stop () {\n    // Nothing to do\n  }\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n  setVolume (fraction) {\n    // No volume support\n  }\n  mute = () => {\n    // No volume support\n  }\n  unmute = () => {\n    // No volume support\n  }\n  getDuration () {\n    return this.duration\n  }\n  getCurrentTime () {\n    return this.currentTime\n  }\n  getSecondsLoaded () {\n    return null\n  }\n  ref = iframe => {\n    this.iframe = iframe\n  }\n  render () {\n    const { url, config } = this.props\n    const id = url.match(MATCH_URL)[1]\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    const query = queryString({\n      ...config.mixcloud.options,\n      feed: `/${id}/`\n    })\n    // We have to give the iframe a key here to prevent a\n    // weird dialog appearing when loading a new track\n    return (\n      <iframe\n        key={id}\n        ref={this.ref}\n        style={style}\n        src={`https://www.mixcloud.com/widget/iframe/?${query}`}\n        frameBorder='0'\n      />\n    )\n  }\n}\n\nexport default createSinglePlayer(Mixcloud)\n"]},"metadata":{},"sourceType":"module"}