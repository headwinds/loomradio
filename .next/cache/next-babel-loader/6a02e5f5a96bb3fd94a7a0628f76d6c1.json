{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/braflow/loomradio/src/players/YouTube.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils';\nimport createSinglePlayer from '../singlePlayer';\nvar SDK_URL = 'https://www.youtube.com/iframe_api';\nvar SDK_GLOBAL = 'YT';\nvar SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady';\nvar MATCH_URL = /(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})|youtube\\.com\\/playlist\\?list=/;\nvar MATCH_PLAYLIST = /list=([a-zA-Z0-9_-]+)/;\n\nfunction parsePlaylist(url) {\n  if (MATCH_PLAYLIST.test(url)) {\n    var _url$match = url.match(MATCH_PLAYLIST),\n        _url$match2 = _slicedToArray(_url$match, 2),\n        playlistId = _url$match2[1];\n\n    return {\n      listType: 'playlist',\n      list: playlistId\n    };\n  }\n\n  return {};\n}\n\nexport var YouTube = /*#__PURE__*/function (_Component) {\n  _inherits(YouTube, _Component);\n\n  var _super = _createSuper(YouTube);\n\n  function YouTube() {\n    var _this;\n\n    _classCallCheck(this, YouTube);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"callPlayer\", callPlayer);\n\n    _defineProperty(_assertThisInitialized(_this), \"onStateChange\", function (_ref) {\n      var data = _ref.data;\n      var _this$props = _this.props,\n          onPlay = _this$props.onPlay,\n          onPause = _this$props.onPause,\n          onBuffer = _this$props.onBuffer,\n          onBufferEnd = _this$props.onBufferEnd,\n          onEnded = _this$props.onEnded,\n          onReady = _this$props.onReady,\n          loop = _this$props.loop;\n      var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState,\n          PLAYING = _window$SDK_GLOBAL$Pl.PLAYING,\n          PAUSED = _window$SDK_GLOBAL$Pl.PAUSED,\n          BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING,\n          ENDED = _window$SDK_GLOBAL$Pl.ENDED,\n          CUED = _window$SDK_GLOBAL$Pl.CUED;\n\n      if (data === PLAYING) {\n        onPlay();\n        onBufferEnd();\n      }\n\n      if (data === PAUSED) onPause();\n      if (data === BUFFERING) onBuffer();\n\n      if (data === ENDED) {\n        var isPlaylist = !!_this.callPlayer('getPlaylist');\n\n        if (loop && !isPlaylist) {\n          _this.play(); // Only loop manually if not playing a playlist\n\n        }\n\n        onEnded();\n      }\n\n      if (data === CUED) onReady();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mute\", function () {\n      _this.callPlayer('mute');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unmute\", function () {\n      _this.callPlayer('unMute');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ref\", function (container) {\n      _this.container = container;\n    });\n\n    return _this;\n  }\n\n  _createClass(YouTube, [{\n    key: \"load\",\n    value: function load(url, isReady) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          playing = _this$props2.playing,\n          muted = _this$props2.muted,\n          playsinline = _this$props2.playsinline,\n          controls = _this$props2.controls,\n          loop = _this$props2.loop,\n          config = _this$props2.config,\n          _onError = _this$props2.onError;\n      var _config$youtube = config.youtube,\n          playerVars = _config$youtube.playerVars,\n          embedOptions = _config$youtube.embedOptions;\n      var id = url && url.match(MATCH_URL)[1];\n\n      if (isReady) {\n        if (MATCH_PLAYLIST.test(url)) {\n          this.player.loadPlaylist(parsePlaylist(url));\n          return;\n        }\n\n        this.player.cueVideoById({\n          videoId: id,\n          startSeconds: parseStartTime(url) || playerVars.start,\n          endSeconds: parseEndTime(url) || playerVars.end\n        });\n        return;\n      }\n\n      getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function (YT) {\n        return YT.loaded;\n      }).then(function (YT) {\n        if (!_this2.container) return;\n        _this2.player = new YT.Player(_this2.container, _objectSpread({\n          width: '100%',\n          height: '100%',\n          videoId: id,\n          playerVars: _objectSpread(_objectSpread({\n            autoplay: playing ? 1 : 0,\n            mute: muted ? 1 : 0,\n            controls: controls ? 1 : 0,\n            start: parseStartTime(url),\n            end: parseEndTime(url),\n            origin: window.location.origin,\n            playsinline: playsinline\n          }, parsePlaylist(url)), playerVars),\n          events: {\n            onReady: _this2.props.onReady,\n            onStateChange: _this2.onStateChange,\n            onError: function onError(event) {\n              return _onError(event.data);\n            }\n          }\n        }, embedOptions));\n\n        if (loop) {\n          _this2.player.setLoop(true); // Enable playlist looping\n\n        }\n      }, _onError);\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.callPlayer('playVideo');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.callPlayer('pauseVideo');\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!document.body.contains(this.callPlayer('getIframe'))) return;\n      this.callPlayer('stopVideo');\n    }\n  }, {\n    key: \"seekTo\",\n    value: function seekTo(amount) {\n      this.callPlayer('seekTo', amount);\n\n      if (!this.props.playing) {\n        this.pause();\n      }\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(fraction) {\n      this.callPlayer('setVolume', fraction * 100);\n    }\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(rate) {\n      this.callPlayer('setPlaybackRate', rate);\n    }\n  }, {\n    key: \"setLoop\",\n    value: function setLoop(loop) {\n      this.callPlayer('setLoop', loop);\n    }\n  }, {\n    key: \"getDuration\",\n    value: function getDuration() {\n      return this.callPlayer('getDuration');\n    }\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      return this.callPlayer('getCurrentTime');\n    }\n  }, {\n    key: \"getSecondsLoaded\",\n    value: function getSecondsLoaded() {\n      return this.callPlayer('getVideoLoadedFraction') * this.getDuration();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = _objectSpread({\n        width: '100%',\n        height: '100%'\n      }, this.props.style);\n\n      return __jsx(\"div\", {\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        ref: this.ref,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return YouTube;\n}(Component);\n\n_defineProperty(YouTube, \"displayName\", 'YouTube');\n\n_defineProperty(YouTube, \"canPlay\", function (url) {\n  return MATCH_URL.test(url);\n});\n\nexport default _c = createSinglePlayer(YouTube);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/braflow/loomradio/src/players/YouTube.js"],"names":["React","Component","callPlayer","getSDK","parseStartTime","parseEndTime","createSinglePlayer","SDK_URL","SDK_GLOBAL","SDK_GLOBAL_READY","MATCH_URL","MATCH_PLAYLIST","parsePlaylist","url","test","match","playlistId","listType","list","YouTube","data","props","onPlay","onPause","onBuffer","onBufferEnd","onEnded","onReady","loop","window","PlayerState","PLAYING","PAUSED","BUFFERING","ENDED","CUED","isPlaylist","play","container","isReady","playing","muted","playsinline","controls","config","onError","youtube","playerVars","embedOptions","id","player","loadPlaylist","cueVideoById","videoId","startSeconds","start","endSeconds","end","YT","loaded","then","Player","width","height","autoplay","mute","origin","location","events","onStateChange","event","setLoop","document","body","contains","amount","pause","fraction","rate","getDuration","style","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils'\nimport createSinglePlayer from '../singlePlayer'\n\nconst SDK_URL = 'https://www.youtube.com/iframe_api'\nconst SDK_GLOBAL = 'YT'\nconst SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady'\nconst MATCH_URL = /(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})|youtube\\.com\\/playlist\\?list=/\nconst MATCH_PLAYLIST = /list=([a-zA-Z0-9_-]+)/\n\nfunction parsePlaylist (url) {\n  if (MATCH_PLAYLIST.test(url)) {\n    const [, playlistId] = url.match(MATCH_PLAYLIST)\n    return {\n      listType: 'playlist',\n      list: playlistId\n    }\n  }\n  return {}\n}\n\nexport class YouTube extends Component {\n  static displayName = 'YouTube'\n  static canPlay = url => MATCH_URL.test(url)\n\n  callPlayer = callPlayer\n  load (url, isReady) {\n    const { playing, muted, playsinline, controls, loop, config, onError } = this.props\n    const { playerVars, embedOptions } = config.youtube\n    const id = url && url.match(MATCH_URL)[1]\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url)) {\n        this.player.loadPlaylist(parsePlaylist(url))\n        return\n      }\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: parseStartTime(url) || playerVars.start,\n        endSeconds: parseEndTime(url) || playerVars.end\n      })\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return\n      this.player = new YT.Player(this.container, {\n        width: '100%',\n        height: '100%',\n        videoId: id,\n        playerVars: {\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: parseStartTime(url),\n          end: parseEndTime(url),\n          origin: window.location.origin,\n          playsinline: playsinline,\n          ...parsePlaylist(url),\n          ...playerVars\n        },\n        events: {\n          onReady: this.props.onReady,\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        },\n        ...embedOptions\n      })\n      if (loop) {\n        this.player.setLoop(true) // Enable playlist looping\n      }\n    }, onError)\n  }\n  onStateChange = ({ data }) => {\n    const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop } = this.props\n    const { PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState\n    if (data === PLAYING) {\n      onPlay()\n      onBufferEnd()\n    }\n    if (data === PAUSED) onPause()\n    if (data === BUFFERING) onBuffer()\n    if (data === ENDED) {\n      const isPlaylist = !!this.callPlayer('getPlaylist')\n      if (loop && !isPlaylist) {\n        this.play() // Only loop manually if not playing a playlist\n      }\n      onEnded()\n    }\n    if (data === CUED) onReady()\n  }\n  play () {\n    this.callPlayer('playVideo')\n  }\n  pause () {\n    this.callPlayer('pauseVideo')\n  }\n  stop () {\n    if (!document.body.contains(this.callPlayer('getIframe'))) return\n    this.callPlayer('stopVideo')\n  }\n  seekTo (amount) {\n    this.callPlayer('seekTo', amount)\n    if (!this.props.playing) {\n      this.pause()\n    }\n  }\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction * 100)\n  }\n  mute = () => {\n    this.callPlayer('mute')\n  }\n  unmute = () => {\n    this.callPlayer('unMute')\n  }\n  setPlaybackRate (rate) {\n    this.callPlayer('setPlaybackRate', rate)\n  }\n  setLoop (loop) {\n    this.callPlayer('setLoop', loop)\n  }\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n  getSecondsLoaded () {\n    return this.callPlayer('getVideoLoadedFraction') * this.getDuration()\n  }\n  ref = container => {\n    this.container = container\n  }\n  render () {\n    const style = {\n      width: '100%',\n      height: '100%',\n      ...this.props.style\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}\n\nexport default createSinglePlayer(YouTube)\n"]},"metadata":{},"sourceType":"module"}