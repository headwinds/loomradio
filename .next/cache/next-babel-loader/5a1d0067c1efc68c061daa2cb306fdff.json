{"ast":null,"code":"var _jsxFileName = \"/Users/braflow/loomradio/src/players/Facebook.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { callPlayer, getSDK, randomString } from '../utils';\nimport createSinglePlayer from '../singlePlayer';\nconst SDK_URL = '//connect.facebook.net/en_US/sdk.js';\nconst SDK_GLOBAL = 'FB';\nconst SDK_GLOBAL_READY = 'fbAsyncInit';\nconst MATCH_URL = /facebook\\.com\\/([^/?].+\\/)?video(s|\\.php)[/?].*$/;\nconst PLAYER_ID_PREFIX = 'facebook-player-';\nexport class Facebook extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"callPlayer\", callPlayer);\n\n    _defineProperty(this, \"playerID\", PLAYER_ID_PREFIX + randomString());\n\n    _defineProperty(this, \"mute\", () => {\n      this.callPlayer('mute');\n    });\n\n    _defineProperty(this, \"unmute\", () => {\n      this.callPlayer('unmute');\n    });\n  }\n\n  load(url, isReady) {\n    if (isReady) {\n      getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(FB => FB.XFBML.parse());\n      return;\n    }\n\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(FB => {\n      FB.init({\n        appId: this.props.config.facebook.appId,\n        xfbml: true,\n        version: 'v2.5'\n      });\n      FB.Event.subscribe('xfbml.render', msg => {\n        // Here we know the SDK has loaded, even if onReady/onPlay\n        // is not called due to a video that cannot be embedded\n        this.props.onLoaded();\n      });\n      FB.Event.subscribe('xfbml.ready', msg => {\n        if (msg.type === 'video' && msg.id === this.playerID) {\n          this.player = msg.instance;\n          this.player.subscribe('startedPlaying', this.props.onPlay);\n          this.player.subscribe('paused', this.props.onPause);\n          this.player.subscribe('finishedPlaying', this.props.onEnded);\n          this.player.subscribe('startedBuffering', this.props.onBuffer);\n          this.player.subscribe('finishedBuffering', this.props.onBufferEnd);\n          this.player.subscribe('error', this.props.onError);\n\n          if (!this.props.muted) {\n            // Player is muted by default\n            this.callPlayer('unmute');\n          }\n\n          this.props.onReady(); // For some reason Facebook have added `visibility: hidden`\n          // to the iframe when autoplay fails, so here we set it back\n\n          document.getElementById(this.playerID).querySelector('iframe').style.visibility = 'visible';\n        }\n      });\n    });\n  }\n\n  play() {\n    this.callPlayer('play');\n  }\n\n  pause() {\n    this.callPlayer('pause');\n  }\n\n  stop() {// Nothing to do\n  }\n\n  seekTo(seconds) {\n    this.callPlayer('seek', seconds);\n  }\n\n  setVolume(fraction) {\n    this.callPlayer('setVolume', fraction);\n  }\n\n  getDuration() {\n    return this.callPlayer('getDuration');\n  }\n\n  getCurrentTime() {\n    return this.callPlayer('getCurrentPosition');\n  }\n\n  getSecondsLoaded() {\n    return null;\n  }\n\n  render() {\n    const style = {\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'black'\n    };\n    return __jsx(\"div\", {\n      style: style,\n      id: this.playerID,\n      className: \"fb-video\",\n      \"data-href\": this.props.url,\n      \"data-autoplay\": this.props.playing ? 'true' : 'false',\n      \"data-allowfullscreen\": \"true\",\n      \"data-controls\": this.props.controls ? 'true' : 'false',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\n_defineProperty(Facebook, \"displayName\", 'Facebook');\n\n_defineProperty(Facebook, \"canPlay\", url => MATCH_URL.test(url));\n\n_defineProperty(Facebook, \"loopOnEnded\", true);\n\nexport default createSinglePlayer(Facebook);","map":{"version":3,"sources":["/Users/braflow/loomradio/src/players/Facebook.js"],"names":["React","Component","callPlayer","getSDK","randomString","createSinglePlayer","SDK_URL","SDK_GLOBAL","SDK_GLOBAL_READY","MATCH_URL","PLAYER_ID_PREFIX","Facebook","load","url","isReady","then","FB","XFBML","parse","init","appId","props","config","facebook","xfbml","version","Event","subscribe","msg","onLoaded","type","id","playerID","player","instance","onPlay","onPause","onEnded","onBuffer","onBufferEnd","onError","muted","onReady","document","getElementById","querySelector","style","visibility","play","pause","stop","seekTo","seconds","setVolume","fraction","getDuration","getCurrentTime","getSecondsLoaded","render","width","height","backgroundColor","playing","controls","test"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, randomString } from '../utils'\nimport createSinglePlayer from '../singlePlayer'\n\nconst SDK_URL = '//connect.facebook.net/en_US/sdk.js'\nconst SDK_GLOBAL = 'FB'\nconst SDK_GLOBAL_READY = 'fbAsyncInit'\nconst MATCH_URL = /facebook\\.com\\/([^/?].+\\/)?video(s|\\.php)[/?].*$/\nconst PLAYER_ID_PREFIX = 'facebook-player-'\n\nexport class Facebook extends Component {\n  static displayName = 'Facebook'\n  static canPlay = url => MATCH_URL.test(url)\n  static loopOnEnded = true\n\n  callPlayer = callPlayer\n  playerID = PLAYER_ID_PREFIX + randomString()\n  load (url, isReady) {\n    if (isReady) {\n      getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(FB => FB.XFBML.parse())\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(FB => {\n      FB.init({\n        appId: this.props.config.facebook.appId,\n        xfbml: true,\n        version: 'v2.5'\n      })\n      FB.Event.subscribe('xfbml.render', msg => {\n        // Here we know the SDK has loaded, even if onReady/onPlay\n        // is not called due to a video that cannot be embedded\n        this.props.onLoaded()\n      })\n      FB.Event.subscribe('xfbml.ready', msg => {\n        if (msg.type === 'video' && msg.id === this.playerID) {\n          this.player = msg.instance\n          this.player.subscribe('startedPlaying', this.props.onPlay)\n          this.player.subscribe('paused', this.props.onPause)\n          this.player.subscribe('finishedPlaying', this.props.onEnded)\n          this.player.subscribe('startedBuffering', this.props.onBuffer)\n          this.player.subscribe('finishedBuffering', this.props.onBufferEnd)\n          this.player.subscribe('error', this.props.onError)\n          if (!this.props.muted) {\n            // Player is muted by default\n            this.callPlayer('unmute')\n          }\n          this.props.onReady()\n\n          // For some reason Facebook have added `visibility: hidden`\n          // to the iframe when autoplay fails, so here we set it back\n          document.getElementById(this.playerID).querySelector('iframe').style.visibility = 'visible'\n        }\n      })\n    })\n  }\n  play () {\n    this.callPlayer('play')\n  }\n  pause () {\n    this.callPlayer('pause')\n  }\n  stop () {\n    // Nothing to do\n  }\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n  mute = () => {\n    this.callPlayer('mute')\n  }\n  unmute = () => {\n    this.callPlayer('unmute')\n  }\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n  getCurrentTime () {\n    return this.callPlayer('getCurrentPosition')\n  }\n  getSecondsLoaded () {\n    return null\n  }\n  render () {\n    const style = {\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'black'\n    }\n    return (\n      <div\n        style={style}\n        id={this.playerID}\n        className='fb-video'\n        data-href={this.props.url}\n        data-autoplay={this.props.playing ? 'true' : 'false'}\n        data-allowfullscreen='true'\n        data-controls={this.props.controls ? 'true' : 'false'}\n      />\n    )\n  }\n}\n\nexport default createSinglePlayer(Facebook)\n"]},"metadata":{},"sourceType":"module"}