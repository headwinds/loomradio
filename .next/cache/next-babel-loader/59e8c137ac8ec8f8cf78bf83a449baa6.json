{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/braflow/loomradio/src/players/Twitch.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { callPlayer, getSDK, randomString } from '../utils';\nimport createSinglePlayer from '../singlePlayer';\nvar SDK_URL = 'https://player.twitch.tv/js/embed/v1.js';\nvar SDK_GLOBAL = 'Twitch';\nvar MATCH_VIDEO_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nvar MATCH_CHANNEL_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-z0-9_]+)($|\\?)/;\nvar PLAYER_ID_PREFIX = 'twitch-player-';\nexport var Twitch = /*#__PURE__*/function (_Component) {\n  _inherits(Twitch, _Component);\n\n  var _super = _createSuper(Twitch);\n\n  function Twitch() {\n    var _this;\n\n    _classCallCheck(this, Twitch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"callPlayer\", callPlayer);\n\n    _defineProperty(_assertThisInitialized(_this), \"playerID\", PLAYER_ID_PREFIX + randomString());\n\n    _defineProperty(_assertThisInitialized(_this), \"mute\", function () {\n      _this.callPlayer('setMuted', true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unmute\", function () {\n      _this.callPlayer('setMuted', false);\n    });\n\n    return _this;\n  }\n\n  _createClass(Twitch, [{\n    key: \"load\",\n    value: function load(url, isReady) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          playsinline = _this$props.playsinline,\n          onError = _this$props.onError,\n          config = _this$props.config;\n      var isChannel = MATCH_CHANNEL_URL.test(url);\n      var id = isChannel ? url.match(MATCH_CHANNEL_URL)[1] : url.match(MATCH_VIDEO_URL)[1];\n\n      if (isReady) {\n        if (isChannel) {\n          this.player.setChannel(id);\n        } else {\n          this.player.setVideo('v' + id);\n        }\n\n        return;\n      }\n\n      getSDK(SDK_URL, SDK_GLOBAL).then(function (Twitch) {\n        _this2.player = new Twitch.Player(_this2.playerID, _objectSpread({\n          video: isChannel ? '' : id,\n          channel: isChannel ? id : '',\n          height: '100%',\n          width: '100%',\n          playsinline: playsinline,\n          autoplay: _this2.props.playing,\n          muted: _this2.props.muted\n        }, config.twitch.options));\n        var _Twitch$Player = Twitch.Player,\n            READY = _Twitch$Player.READY,\n            PLAYING = _Twitch$Player.PLAYING,\n            PAUSE = _Twitch$Player.PAUSE,\n            ENDED = _Twitch$Player.ENDED;\n\n        _this2.player.addEventListener(READY, _this2.props.onReady);\n\n        _this2.player.addEventListener(PLAYING, _this2.props.onPlay);\n\n        _this2.player.addEventListener(PAUSE, _this2.props.onPause);\n\n        _this2.player.addEventListener(ENDED, _this2.props.onEnded);\n      }, onError);\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.callPlayer('play');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.callPlayer('pause');\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.callPlayer('pause');\n    }\n  }, {\n    key: \"seekTo\",\n    value: function seekTo(seconds) {\n      this.callPlayer('seek', seconds);\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(fraction) {\n      this.callPlayer('setVolume', fraction);\n    }\n  }, {\n    key: \"getDuration\",\n    value: function getDuration() {\n      return this.callPlayer('getDuration');\n    }\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      return this.callPlayer('getCurrentTime');\n    }\n  }, {\n    key: \"getSecondsLoaded\",\n    value: function getSecondsLoaded() {\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = {\n        width: '100%',\n        height: '100%'\n      };\n      return __jsx(\"div\", {\n        style: style,\n        id: this.playerID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Twitch;\n}(Component);\n\n_defineProperty(Twitch, \"displayName\", 'Twitch');\n\n_defineProperty(Twitch, \"canPlay\", function (url) {\n  return MATCH_VIDEO_URL.test(url) || MATCH_CHANNEL_URL.test(url);\n});\n\n_defineProperty(Twitch, \"loopOnEnded\", true);\n\nexport default _c = createSinglePlayer(Twitch);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/braflow/loomradio/src/players/Twitch.js"],"names":["React","Component","callPlayer","getSDK","randomString","createSinglePlayer","SDK_URL","SDK_GLOBAL","MATCH_VIDEO_URL","MATCH_CHANNEL_URL","PLAYER_ID_PREFIX","Twitch","url","isReady","props","playsinline","onError","config","isChannel","test","id","match","player","setChannel","setVideo","then","Player","playerID","video","channel","height","width","autoplay","playing","muted","twitch","options","READY","PLAYING","PAUSE","ENDED","addEventListener","onReady","onPlay","onPause","onEnded","seconds","fraction","style"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,YAA7B,QAAiD,UAAjD;AACA,OAAOC,kBAAP,MAA+B,iBAA/B;AAEA,IAAMC,OAAO,GAAG,yCAAhB;AACA,IAAMC,UAAU,GAAG,QAAnB;AACA,IAAMC,eAAe,GAAG,gDAAxB;AACA,IAAMC,iBAAiB,GAAG,+CAA1B;AACA,IAAMC,gBAAgB,GAAG,gBAAzB;AAEA,WAAaC,MAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,iEAKeT,UALf;;AAAA,+DAMaQ,gBAAgB,GAAGN,YAAY,EAN5C;;AAAA,2DAoDS,YAAM;AACX,YAAKF,UAAL,CAAgB,UAAhB,EAA4B,IAA5B;AACD,KAtDH;;AAAA,6DAuDW,YAAM;AACb,YAAKA,UAAL,CAAgB,UAAhB,EAA4B,KAA5B;AACD,KAzDH;;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAOQU,GAPR,EAOaC,OAPb,EAOsB;AAAA;;AAAA,wBACuB,KAAKC,KAD5B;AAAA,UACVC,WADU,eACVA,WADU;AAAA,UACGC,OADH,eACGA,OADH;AAAA,UACYC,MADZ,eACYA,MADZ;AAElB,UAAMC,SAAS,GAAGT,iBAAiB,CAACU,IAAlB,CAAuBP,GAAvB,CAAlB;AACA,UAAMQ,EAAE,GAAGF,SAAS,GAAGN,GAAG,CAACS,KAAJ,CAAUZ,iBAAV,EAA6B,CAA7B,CAAH,GAAqCG,GAAG,CAACS,KAAJ,CAAUb,eAAV,EAA2B,CAA3B,CAAzD;;AACA,UAAIK,OAAJ,EAAa;AACX,YAAIK,SAAJ,EAAe;AACb,eAAKI,MAAL,CAAYC,UAAZ,CAAuBH,EAAvB;AACD,SAFD,MAEO;AACL,eAAKE,MAAL,CAAYE,QAAZ,CAAqB,MAAMJ,EAA3B;AACD;;AACD;AACD;;AACDjB,MAAAA,MAAM,CAACG,OAAD,EAAUC,UAAV,CAAN,CAA4BkB,IAA5B,CAAiC,UAAAd,MAAM,EAAI;AACzC,QAAA,MAAI,CAACW,MAAL,GAAc,IAAIX,MAAM,CAACe,MAAX,CAAkB,MAAI,CAACC,QAAvB;AACZC,UAAAA,KAAK,EAAEV,SAAS,GAAG,EAAH,GAAQE,EADZ;AAEZS,UAAAA,OAAO,EAAEX,SAAS,GAAGE,EAAH,GAAQ,EAFd;AAGZU,UAAAA,MAAM,EAAE,MAHI;AAIZC,UAAAA,KAAK,EAAE,MAJK;AAKZhB,UAAAA,WAAW,EAAEA,WALD;AAMZiB,UAAAA,QAAQ,EAAE,MAAI,CAAClB,KAAL,CAAWmB,OANT;AAOZC,UAAAA,KAAK,EAAE,MAAI,CAACpB,KAAL,CAAWoB;AAPN,WAQTjB,MAAM,CAACkB,MAAP,CAAcC,OARL,EAAd;AADyC,6BAWAzB,MAAM,CAACe,MAXP;AAAA,YAWjCW,KAXiC,kBAWjCA,KAXiC;AAAA,YAW1BC,OAX0B,kBAW1BA,OAX0B;AAAA,YAWjBC,KAXiB,kBAWjBA,KAXiB;AAAA,YAWVC,KAXU,kBAWVA,KAXU;;AAYzC,QAAA,MAAI,CAAClB,MAAL,CAAYmB,gBAAZ,CAA6BJ,KAA7B,EAAoC,MAAI,CAACvB,KAAL,CAAW4B,OAA/C;;AACA,QAAA,MAAI,CAACpB,MAAL,CAAYmB,gBAAZ,CAA6BH,OAA7B,EAAsC,MAAI,CAACxB,KAAL,CAAW6B,MAAjD;;AACA,QAAA,MAAI,CAACrB,MAAL,CAAYmB,gBAAZ,CAA6BF,KAA7B,EAAoC,MAAI,CAACzB,KAAL,CAAW8B,OAA/C;;AACA,QAAA,MAAI,CAACtB,MAAL,CAAYmB,gBAAZ,CAA6BD,KAA7B,EAAoC,MAAI,CAAC1B,KAAL,CAAW+B,OAA/C;AACD,OAhBD,EAgBG7B,OAhBH;AAiBD;AApCH;AAAA;AAAA,2BAqCU;AACN,WAAKd,UAAL,CAAgB,MAAhB;AACD;AAvCH;AAAA;AAAA,4BAwCW;AACP,WAAKA,UAAL,CAAgB,OAAhB;AACD;AA1CH;AAAA;AAAA,2BA2CU;AACN,WAAKA,UAAL,CAAgB,OAAhB;AACD;AA7CH;AAAA;AAAA,2BA8CU4C,OA9CV,EA8CmB;AACf,WAAK5C,UAAL,CAAgB,MAAhB,EAAwB4C,OAAxB;AACD;AAhDH;AAAA;AAAA,8BAiDaC,QAjDb,EAiDuB;AACnB,WAAK7C,UAAL,CAAgB,WAAhB,EAA6B6C,QAA7B;AACD;AAnDH;AAAA;AAAA,kCA0DiB;AACb,aAAO,KAAK7C,UAAL,CAAgB,aAAhB,CAAP;AACD;AA5DH;AAAA;AAAA,qCA6DoB;AAChB,aAAO,KAAKA,UAAL,CAAgB,gBAAhB,CAAP;AACD;AA/DH;AAAA;AAAA,uCAgEsB;AAClB,aAAO,IAAP;AACD;AAlEH;AAAA;AAAA,6BAmEY;AACR,UAAM8C,KAAK,GAAG;AACZjB,QAAAA,KAAK,EAAE,MADK;AAEZD,QAAAA,MAAM,EAAE;AAFI,OAAd;AAIA,aACE;AAAK,QAAA,KAAK,EAAEkB,KAAZ;AAAmB,QAAA,EAAE,EAAE,KAAKrB,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;AA3EH;;AAAA;AAAA,EAA4B1B,SAA5B;;gBAAaU,M,iBACU,Q;;gBADVA,M,aAEM,UAAAC,GAAG;AAAA,SAAIJ,eAAe,CAACW,IAAhB,CAAqBP,GAArB,KAA6BH,iBAAiB,CAACU,IAAlB,CAAuBP,GAAvB,CAAjC;AAAA,C;;gBAFTD,M,iBAGU,I;;AA2EvB,oBAAeN,kBAAkB,CAACM,MAAD,CAAjC","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, randomString } from '../utils'\nimport createSinglePlayer from '../singlePlayer'\n\nconst SDK_URL = 'https://player.twitch.tv/js/embed/v1.js'\nconst SDK_GLOBAL = 'Twitch'\nconst MATCH_VIDEO_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/\nconst MATCH_CHANNEL_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-z0-9_]+)($|\\?)/\nconst PLAYER_ID_PREFIX = 'twitch-player-'\n\nexport class Twitch extends Component {\n  static displayName = 'Twitch'\n  static canPlay = url => MATCH_VIDEO_URL.test(url) || MATCH_CHANNEL_URL.test(url)\n  static loopOnEnded = true\n\n  callPlayer = callPlayer\n  playerID = PLAYER_ID_PREFIX + randomString()\n  load (url, isReady) {\n    const { playsinline, onError, config } = this.props\n    const isChannel = MATCH_CHANNEL_URL.test(url)\n    const id = isChannel ? url.match(MATCH_CHANNEL_URL)[1] : url.match(MATCH_VIDEO_URL)[1]\n    if (isReady) {\n      if (isChannel) {\n        this.player.setChannel(id)\n      } else {\n        this.player.setVideo('v' + id)\n      }\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL).then(Twitch => {\n      this.player = new Twitch.Player(this.playerID, {\n        video: isChannel ? '' : id,\n        channel: isChannel ? id : '',\n        height: '100%',\n        width: '100%',\n        playsinline: playsinline,\n        autoplay: this.props.playing,\n        muted: this.props.muted,\n        ...config.twitch.options\n      })\n      const { READY, PLAYING, PAUSE, ENDED } = Twitch.Player\n      this.player.addEventListener(READY, this.props.onReady)\n      this.player.addEventListener(PLAYING, this.props.onPlay)\n      this.player.addEventListener(PAUSE, this.props.onPause)\n      this.player.addEventListener(ENDED, this.props.onEnded)\n    }, onError)\n  }\n  play () {\n    this.callPlayer('play')\n  }\n  pause () {\n    this.callPlayer('pause')\n  }\n  stop () {\n    this.callPlayer('pause')\n  }\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n  mute = () => {\n    this.callPlayer('setMuted', true)\n  }\n  unmute = () => {\n    this.callPlayer('setMuted', false)\n  }\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n  getSecondsLoaded () {\n    return null\n  }\n  render () {\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    return (\n      <div style={style} id={this.playerID} />\n    )\n  }\n}\n\nexport default createSinglePlayer(Twitch)\n"]},"metadata":{},"sourceType":"module"}