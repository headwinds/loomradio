{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/braflow/loomradio/src/Player.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { propTypes, defaultProps } from \"./props\";\nimport { isEqual } from \"./utils\";\nvar SEEK_ON_PLAY_EXPIRY = 5000;\n\nvar Player = /*#__PURE__*/function (_Component) {\n  _inherits(Player, _Component);\n\n  var _super = _createSuper(Player);\n\n  function Player() {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"isReady\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"isPlaying\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"isLoading\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"loadOnReady\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"startOnPlay\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"seekOnPlay\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDurationCalled\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function (key) {\n      if (!_this.player) return null;\n      return _this.player[key];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"progress\", function () {\n      if (_this.props.url && _this.player && _this.isReady) {\n        var playedSeconds = _this.getCurrentTime() || 0;\n\n        var loadedSeconds = _this.getSecondsLoaded();\n\n        var duration = _this.getDuration();\n\n        if (duration) {\n          var progress = {\n            playedSeconds: playedSeconds,\n            played: playedSeconds / duration\n          };\n\n          if (loadedSeconds !== null) {\n            progress.loadedSeconds = loadedSeconds;\n            progress.loaded = loadedSeconds / duration;\n          } // Only call onProgress if values have changed\n\n\n          if (progress.played !== _this.prevPlayed || progress.loaded !== _this.prevLoaded) {\n            _this.props.onProgress(progress);\n          }\n\n          _this.prevPlayed = progress.played;\n          _this.prevLoaded = progress.loaded;\n        }\n      }\n\n      _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onReady\", function () {\n      if (!_this.mounted) return;\n      _this.isReady = true;\n      _this.isLoading = false;\n      var _this$props = _this.props,\n          onReady = _this$props.onReady,\n          playing = _this$props.playing,\n          volume = _this$props.volume,\n          muted = _this$props.muted;\n      onReady();\n\n      if (!muted && volume !== null) {\n        _this.player.setVolume(volume);\n      }\n\n      if (_this.loadOnReady) {\n        _this.player.load(_this.loadOnReady, true);\n\n        _this.loadOnReady = null;\n      } else if (playing) {\n        _this.player.play();\n      }\n\n      _this.onDurationCheck();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlay\", function () {\n      _this.isPlaying = true;\n      _this.isLoading = false;\n      var _this$props2 = _this.props,\n          onStart = _this$props2.onStart,\n          onPlay = _this$props2.onPlay,\n          playbackRate = _this$props2.playbackRate;\n\n      if (_this.startOnPlay) {\n        if (_this.player.setPlaybackRate) {\n          _this.player.setPlaybackRate(playbackRate);\n        }\n\n        onStart();\n        _this.startOnPlay = false;\n      }\n\n      onPlay();\n\n      if (_this.seekOnPlay) {\n        _this.seekTo(_this.seekOnPlay);\n\n        _this.seekOnPlay = null;\n      }\n\n      _this.onDurationCheck();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPause\", function (e) {\n      _this.isPlaying = false;\n\n      if (!_this.isLoading) {\n        _this.props.onPause(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnded\", function () {\n      var _this$props3 = _this.props,\n          activePlayer = _this$props3.activePlayer,\n          loop = _this$props3.loop,\n          onEnded = _this$props3.onEnded;\n\n      if (activePlayer.loopOnEnded && loop) {\n        _this.seekTo(0);\n      }\n\n      if (!loop) {\n        _this.isPlaying = false;\n        onEnded();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onError\", function (e) {\n      _this.isLoading = false;\n\n      _this.props.onError(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDurationCheck\", function () {\n      clearTimeout(_this.durationCheckTimeout);\n\n      var duration = _this.getDuration();\n\n      if (duration) {\n        if (!_this.onDurationCalled) {\n          _this.props.onDuration(duration);\n\n          _this.onDurationCalled = true;\n        }\n      } else {\n        _this.durationCheckTimeout = setTimeout(_this.onDurationCheck, 100);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoaded\", function () {\n      // Sometimes we know loading has stopped but onReady/onPlay are never called\n      // so this provides a way for players to avoid getting stuck\n      _this.isLoading = false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ref\", function (player) {\n      if (player) {\n        _this.player = player;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n      this.player.load(this.props.url);\n      this.progress();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.progressTimeout);\n      clearTimeout(this.durationCheckTimeout);\n\n      if (this.isReady) {\n        this.player.stop();\n      }\n\n      if (this.player.disablePIP) {\n        this.player.disablePIP();\n      }\n\n      this.mounted = false;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      // Invoke player methods based on incoming props\n      var _this$props4 = this.props,\n          url = _this$props4.url,\n          playing = _this$props4.playing,\n          volume = _this$props4.volume,\n          muted = _this$props4.muted,\n          playbackRate = _this$props4.playbackRate,\n          pip = _this$props4.pip,\n          loop = _this$props4.loop;\n\n      if (!isEqual(url, nextProps.url)) {\n        if (this.isLoading) {\n          console.warn(\"ReactPlayer: the attempt to load \".concat(nextProps.url, \" is being deferred until the player has loaded\"));\n          this.loadOnReady = nextProps.url;\n          return;\n        }\n\n        this.isLoading = true;\n        this.startOnPlay = true;\n        this.onDurationCalled = false;\n        this.player.load(nextProps.url, this.isReady);\n      }\n\n      if (!playing && nextProps.playing && !this.isPlaying) {\n        this.player.play();\n      }\n\n      if (playing && !nextProps.playing && this.isPlaying) {\n        this.player.pause();\n      }\n\n      if (!pip && nextProps.pip && this.player.enablePIP) {\n        this.player.enablePIP();\n      } else if (pip && !nextProps.pip && this.player.disablePIP) {\n        this.player.disablePIP();\n      }\n\n      if (volume !== nextProps.volume && nextProps.volume !== null) {\n        this.player.setVolume(nextProps.volume);\n      }\n\n      if (muted !== nextProps.muted) {\n        if (nextProps.muted) {\n          this.player.mute();\n        } else {\n          this.player.unmute();\n\n          if (nextProps.volume !== null) {\n            // Set volume next tick to fix a bug with DailyMotion\n            setTimeout(function () {\n              return _this2.player.setVolume(nextProps.volume);\n            });\n          }\n        }\n      }\n\n      if (playbackRate !== nextProps.playbackRate && this.player.setPlaybackRate) {\n        this.player.setPlaybackRate(nextProps.playbackRate);\n      }\n\n      if (loop !== nextProps.loop && this.player.setLoop) {\n        this.player.setLoop(nextProps.loop);\n      }\n    }\n  }, {\n    key: \"getDuration\",\n    value: function getDuration() {\n      if (!this.isReady) return null;\n      return this.player.getDuration();\n    }\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      if (!this.isReady) return null;\n      return this.player.getCurrentTime();\n    }\n  }, {\n    key: \"getSecondsLoaded\",\n    value: function getSecondsLoaded() {\n      if (!this.isReady) return null;\n      return this.player.getSecondsLoaded();\n    }\n  }, {\n    key: \"seekTo\",\n    value: function seekTo(amount, type) {\n      var _this3 = this;\n\n      // When seeking before player is ready, store value and seek later\n      if (!this.isReady && amount !== 0) {\n        this.seekOnPlay = amount;\n        setTimeout(function () {\n          _this3.seekOnPlay = null;\n        }, SEEK_ON_PLAY_EXPIRY);\n        return;\n      }\n\n      var isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n\n      if (isFraction) {\n        // Convert fraction to seconds based on duration\n        var duration = this.player.getDuration();\n\n        if (!duration) {\n          console.warn(\"ReactPlayer: could not seek using fraction – duration not yet available\");\n          return;\n        }\n\n        this.player.seekTo(duration * amount);\n        return;\n      }\n\n      this.player.seekTo(amount);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ActivePlayer = this.props.activePlayer;\n\n      if (!ActivePlayer) {\n        return null;\n      }\n\n      return __jsx(ActivePlayer, _extends({}, this.props, {\n        ref: this.ref,\n        onReady: this.onReady,\n        onPlay: this.onPlay,\n        onPause: this.onPause,\n        onEnded: this.onEnded,\n        onLoaded: this.onLoaded,\n        onError: this.onError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\n_defineProperty(Player, \"displayName\", \"Player\");\n\n_defineProperty(Player, \"propTypes\", propTypes);\n\n_defineProperty(Player, \"defaultProps\", defaultProps);\n\nexport { Player as default };","map":{"version":3,"sources":["/Users/braflow/loomradio/src/Player.js"],"names":["React","Component","propTypes","defaultProps","isEqual","SEEK_ON_PLAY_EXPIRY","Player","key","player","props","url","isReady","playedSeconds","getCurrentTime","loadedSeconds","getSecondsLoaded","duration","getDuration","progress","played","loaded","prevPlayed","prevLoaded","onProgress","progressTimeout","setTimeout","progressFrequency","progressInterval","mounted","isLoading","onReady","playing","volume","muted","setVolume","loadOnReady","load","play","onDurationCheck","isPlaying","onStart","onPlay","playbackRate","startOnPlay","setPlaybackRate","seekOnPlay","seekTo","e","onPause","activePlayer","loop","onEnded","loopOnEnded","onError","clearTimeout","durationCheckTimeout","onDurationCalled","onDuration","stop","disablePIP","nextProps","pip","console","warn","pause","enablePIP","mute","unmute","setLoop","amount","type","isFraction","ActivePlayer","ref","onLoaded"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { propTypes, defaultProps } from \"./props\";\nimport { isEqual } from \"./utils\";\n\nconst SEEK_ON_PLAY_EXPIRY = 5000;\n\nexport default class Player extends Component {\n  static displayName = \"Player\";\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n  mounted = false;\n  isReady = false;\n  isPlaying = false; // Track playing state internally to prevent bugs\n  isLoading = true; // Use isLoading to prevent onPause when switching URL\n  loadOnReady = null;\n  startOnPlay = true;\n  seekOnPlay = null;\n  onDurationCalled = false;\n  componentDidMount() {\n    this.mounted = true;\n    this.player.load(this.props.url);\n    this.progress();\n  }\n  componentWillUnmount() {\n    clearTimeout(this.progressTimeout);\n    clearTimeout(this.durationCheckTimeout);\n    if (this.isReady) {\n      this.player.stop();\n    }\n    if (this.player.disablePIP) {\n      this.player.disablePIP();\n    }\n    this.mounted = false;\n  }\n  componentWillReceiveProps(nextProps) {\n    // Invoke player methods based on incoming props\n    const { url, playing, volume, muted, playbackRate, pip, loop } = this.props;\n    if (!isEqual(url, nextProps.url)) {\n      if (this.isLoading) {\n        console.warn(\n          `ReactPlayer: the attempt to load ${nextProps.url} is being deferred until the player has loaded`\n        );\n        this.loadOnReady = nextProps.url;\n        return;\n      }\n      this.isLoading = true;\n      this.startOnPlay = true;\n      this.onDurationCalled = false;\n      this.player.load(nextProps.url, this.isReady);\n    }\n    if (!playing && nextProps.playing && !this.isPlaying) {\n      this.player.play();\n    }\n    if (playing && !nextProps.playing && this.isPlaying) {\n      this.player.pause();\n    }\n    if (!pip && nextProps.pip && this.player.enablePIP) {\n      this.player.enablePIP();\n    } else if (pip && !nextProps.pip && this.player.disablePIP) {\n      this.player.disablePIP();\n    }\n    if (volume !== nextProps.volume && nextProps.volume !== null) {\n      this.player.setVolume(nextProps.volume);\n    }\n    if (muted !== nextProps.muted) {\n      if (nextProps.muted) {\n        this.player.mute();\n      } else {\n        this.player.unmute();\n        if (nextProps.volume !== null) {\n          // Set volume next tick to fix a bug with DailyMotion\n          setTimeout(() => this.player.setVolume(nextProps.volume));\n        }\n      }\n    }\n    if (\n      playbackRate !== nextProps.playbackRate &&\n      this.player.setPlaybackRate\n    ) {\n      this.player.setPlaybackRate(nextProps.playbackRate);\n    }\n    if (loop !== nextProps.loop && this.player.setLoop) {\n      this.player.setLoop(nextProps.loop);\n    }\n  }\n  getDuration() {\n    if (!this.isReady) return null;\n    return this.player.getDuration();\n  }\n  getCurrentTime() {\n    if (!this.isReady) return null;\n    return this.player.getCurrentTime();\n  }\n  getSecondsLoaded() {\n    if (!this.isReady) return null;\n    return this.player.getSecondsLoaded();\n  }\n  getInternalPlayer = (key) => {\n    if (!this.player) return null;\n    return this.player[key];\n  };\n  progress = () => {\n    if (this.props.url && this.player && this.isReady) {\n      const playedSeconds = this.getCurrentTime() || 0;\n      const loadedSeconds = this.getSecondsLoaded();\n      const duration = this.getDuration();\n      if (duration) {\n        const progress = {\n          playedSeconds,\n          played: playedSeconds / duration,\n        };\n        if (loadedSeconds !== null) {\n          progress.loadedSeconds = loadedSeconds;\n          progress.loaded = loadedSeconds / duration;\n        }\n        // Only call onProgress if values have changed\n        if (\n          progress.played !== this.prevPlayed ||\n          progress.loaded !== this.prevLoaded\n        ) {\n          this.props.onProgress(progress);\n        }\n        this.prevPlayed = progress.played;\n        this.prevLoaded = progress.loaded;\n      }\n    }\n    this.progressTimeout = setTimeout(\n      this.progress,\n      this.props.progressFrequency || this.props.progressInterval\n    );\n  };\n  seekTo(amount, type) {\n    // When seeking before player is ready, store value and seek later\n    if (!this.isReady && amount !== 0) {\n      this.seekOnPlay = amount;\n      setTimeout(() => {\n        this.seekOnPlay = null;\n      }, SEEK_ON_PLAY_EXPIRY);\n      return;\n    }\n    const isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n    if (isFraction) {\n      // Convert fraction to seconds based on duration\n      const duration = this.player.getDuration();\n      if (!duration) {\n        console.warn(\n          \"ReactPlayer: could not seek using fraction – duration not yet available\"\n        );\n        return;\n      }\n      this.player.seekTo(duration * amount);\n      return;\n    }\n    this.player.seekTo(amount);\n  }\n  onReady = () => {\n    if (!this.mounted) return;\n    this.isReady = true;\n    this.isLoading = false;\n    const { onReady, playing, volume, muted } = this.props;\n    onReady();\n    if (!muted && volume !== null) {\n      this.player.setVolume(volume);\n    }\n    if (this.loadOnReady) {\n      this.player.load(this.loadOnReady, true);\n      this.loadOnReady = null;\n    } else if (playing) {\n      this.player.play();\n    }\n    this.onDurationCheck();\n  };\n  onPlay = () => {\n    this.isPlaying = true;\n    this.isLoading = false;\n    const { onStart, onPlay, playbackRate } = this.props;\n    if (this.startOnPlay) {\n      if (this.player.setPlaybackRate) {\n        this.player.setPlaybackRate(playbackRate);\n      }\n      onStart();\n      this.startOnPlay = false;\n    }\n    onPlay();\n    if (this.seekOnPlay) {\n      this.seekTo(this.seekOnPlay);\n      this.seekOnPlay = null;\n    }\n    this.onDurationCheck();\n  };\n  onPause = (e) => {\n    this.isPlaying = false;\n    if (!this.isLoading) {\n      this.props.onPause(e);\n    }\n  };\n  onEnded = () => {\n    const { activePlayer, loop, onEnded } = this.props;\n    if (activePlayer.loopOnEnded && loop) {\n      this.seekTo(0);\n    }\n    if (!loop) {\n      this.isPlaying = false;\n      onEnded();\n    }\n  };\n  onError = (e) => {\n    this.isLoading = false;\n    this.props.onError(e);\n  };\n  onDurationCheck = () => {\n    clearTimeout(this.durationCheckTimeout);\n    const duration = this.getDuration();\n    if (duration) {\n      if (!this.onDurationCalled) {\n        this.props.onDuration(duration);\n        this.onDurationCalled = true;\n      }\n    } else {\n      this.durationCheckTimeout = setTimeout(this.onDurationCheck, 100);\n    }\n  };\n  onLoaded = () => {\n    // Sometimes we know loading has stopped but onReady/onPlay are never called\n    // so this provides a way for players to avoid getting stuck\n    this.isLoading = false;\n  };\n  ref = (player) => {\n    if (player) {\n      this.player = player;\n    }\n  };\n  render() {\n    const ActivePlayer = this.props.activePlayer;\n    if (!ActivePlayer) {\n      return null;\n    }\n    return (\n      <ActivePlayer\n        {...this.props}\n        ref={this.ref}\n        onReady={this.onReady}\n        onPlay={this.onPlay}\n        onPause={this.onPause}\n        onEnded={this.onEnded}\n        onLoaded={this.onLoaded}\n        onError={this.onError}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}