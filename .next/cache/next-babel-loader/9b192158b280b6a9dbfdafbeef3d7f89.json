{"ast":null,"code":"var _jsxFileName = \"/Users/braflow/loomradio/src/players/YouTube.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils';\nimport createSinglePlayer from '../singlePlayer';\nconst SDK_URL = 'https://www.youtube.com/iframe_api';\nconst SDK_GLOBAL = 'YT';\nconst SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady';\nconst MATCH_URL = /(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})|youtube\\.com\\/playlist\\?list=/;\nconst MATCH_PLAYLIST = /list=([a-zA-Z0-9_-]+)/;\n\nfunction parsePlaylist(url) {\n  if (MATCH_PLAYLIST.test(url)) {\n    const [, playlistId] = url.match(MATCH_PLAYLIST);\n    return {\n      listType: 'playlist',\n      list: playlistId\n    };\n  }\n\n  return {};\n}\n\nexport class YouTube extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"callPlayer\", callPlayer);\n\n    _defineProperty(this, \"onStateChange\", ({\n      data\n    }) => {\n      const {\n        onPlay,\n        onPause,\n        onBuffer,\n        onBufferEnd,\n        onEnded,\n        onReady,\n        loop\n      } = this.props;\n      const {\n        PLAYING,\n        PAUSED,\n        BUFFERING,\n        ENDED,\n        CUED\n      } = window[SDK_GLOBAL].PlayerState;\n\n      if (data === PLAYING) {\n        onPlay();\n        onBufferEnd();\n      }\n\n      if (data === PAUSED) onPause();\n      if (data === BUFFERING) onBuffer();\n\n      if (data === ENDED) {\n        const isPlaylist = !!this.callPlayer('getPlaylist');\n\n        if (loop && !isPlaylist) {\n          this.play(); // Only loop manually if not playing a playlist\n        }\n\n        onEnded();\n      }\n\n      if (data === CUED) onReady();\n    });\n\n    _defineProperty(this, \"mute\", () => {\n      this.callPlayer('mute');\n    });\n\n    _defineProperty(this, \"unmute\", () => {\n      this.callPlayer('unMute');\n    });\n\n    _defineProperty(this, \"ref\", container => {\n      this.container = container;\n    });\n  }\n\n  load(url, isReady) {\n    const {\n      playing,\n      muted,\n      playsinline,\n      controls,\n      loop,\n      config,\n      onError\n    } = this.props;\n    const {\n      playerVars,\n      embedOptions\n    } = config.youtube;\n    const id = url && url.match(MATCH_URL)[1];\n\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url)) {\n        this.player.loadPlaylist(parsePlaylist(url));\n        return;\n      }\n\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: parseStartTime(url) || playerVars.start,\n        endSeconds: parseEndTime(url) || playerVars.end\n      });\n      return;\n    }\n\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return;\n      this.player = new YT.Player(this.container, _objectSpread({\n        width: '100%',\n        height: '100%',\n        videoId: id,\n        playerVars: _objectSpread(_objectSpread({\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: parseStartTime(url),\n          end: parseEndTime(url),\n          origin: window.location.origin,\n          playsinline: playsinline\n        }, parsePlaylist(url)), playerVars),\n        events: {\n          onReady: this.props.onReady,\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        }\n      }, embedOptions));\n\n      if (loop) {\n        this.player.setLoop(true); // Enable playlist looping\n      }\n    }, onError);\n  }\n\n  play() {\n    this.callPlayer('playVideo');\n  }\n\n  pause() {\n    this.callPlayer('pauseVideo');\n  }\n\n  stop() {\n    if (!document.body.contains(this.callPlayer('getIframe'))) return;\n    this.callPlayer('stopVideo');\n  }\n\n  seekTo(amount) {\n    this.callPlayer('seekTo', amount);\n\n    if (!this.props.playing) {\n      this.pause();\n    }\n  }\n\n  setVolume(fraction) {\n    this.callPlayer('setVolume', fraction * 100);\n  }\n\n  setPlaybackRate(rate) {\n    this.callPlayer('setPlaybackRate', rate);\n  }\n\n  setLoop(loop) {\n    this.callPlayer('setLoop', loop);\n  }\n\n  getDuration() {\n    return this.callPlayer('getDuration');\n  }\n\n  getCurrentTime() {\n    return this.callPlayer('getCurrentTime');\n  }\n\n  getSecondsLoaded() {\n    return this.callPlayer('getVideoLoadedFraction') * this.getDuration();\n  }\n\n  render() {\n    const style = _objectSpread({\n      width: '100%',\n      height: '100%'\n    }, this.props.style);\n\n    return __jsx(\"div\", {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      ref: this.ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n_defineProperty(YouTube, \"displayName\", 'YouTube');\n\n_defineProperty(YouTube, \"canPlay\", url => MATCH_URL.test(url));\n\nexport default createSinglePlayer(YouTube);","map":{"version":3,"sources":["/Users/braflow/loomradio/src/players/YouTube.js"],"names":["React","Component","callPlayer","getSDK","parseStartTime","parseEndTime","createSinglePlayer","SDK_URL","SDK_GLOBAL","SDK_GLOBAL_READY","MATCH_URL","MATCH_PLAYLIST","parsePlaylist","url","test","playlistId","match","listType","list","YouTube","data","onPlay","onPause","onBuffer","onBufferEnd","onEnded","onReady","loop","props","PLAYING","PAUSED","BUFFERING","ENDED","CUED","window","PlayerState","isPlaylist","play","container","load","isReady","playing","muted","playsinline","controls","config","onError","playerVars","embedOptions","youtube","id","player","loadPlaylist","cueVideoById","videoId","startSeconds","start","endSeconds","end","YT","loaded","then","Player","width","height","autoplay","mute","origin","location","events","onStateChange","event","setLoop","pause","stop","document","body","contains","seekTo","amount","setVolume","fraction","setPlaybackRate","rate","getDuration","getCurrentTime","getSecondsLoaded","render","style","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils'\nimport createSinglePlayer from '../singlePlayer'\n\nconst SDK_URL = 'https://www.youtube.com/iframe_api'\nconst SDK_GLOBAL = 'YT'\nconst SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady'\nconst MATCH_URL = /(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})|youtube\\.com\\/playlist\\?list=/\nconst MATCH_PLAYLIST = /list=([a-zA-Z0-9_-]+)/\n\nfunction parsePlaylist (url) {\n  if (MATCH_PLAYLIST.test(url)) {\n    const [, playlistId] = url.match(MATCH_PLAYLIST)\n    return {\n      listType: 'playlist',\n      list: playlistId\n    }\n  }\n  return {}\n}\n\nexport class YouTube extends Component {\n  static displayName = 'YouTube'\n  static canPlay = url => MATCH_URL.test(url)\n\n  callPlayer = callPlayer\n  load (url, isReady) {\n    const { playing, muted, playsinline, controls, loop, config, onError } = this.props\n    const { playerVars, embedOptions } = config.youtube\n    const id = url && url.match(MATCH_URL)[1]\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url)) {\n        this.player.loadPlaylist(parsePlaylist(url))\n        return\n      }\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: parseStartTime(url) || playerVars.start,\n        endSeconds: parseEndTime(url) || playerVars.end\n      })\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return\n      this.player = new YT.Player(this.container, {\n        width: '100%',\n        height: '100%',\n        videoId: id,\n        playerVars: {\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: parseStartTime(url),\n          end: parseEndTime(url),\n          origin: window.location.origin,\n          playsinline: playsinline,\n          ...parsePlaylist(url),\n          ...playerVars\n        },\n        events: {\n          onReady: this.props.onReady,\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        },\n        ...embedOptions\n      })\n      if (loop) {\n        this.player.setLoop(true) // Enable playlist looping\n      }\n    }, onError)\n  }\n  onStateChange = ({ data }) => {\n    const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop } = this.props\n    const { PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState\n    if (data === PLAYING) {\n      onPlay()\n      onBufferEnd()\n    }\n    if (data === PAUSED) onPause()\n    if (data === BUFFERING) onBuffer()\n    if (data === ENDED) {\n      const isPlaylist = !!this.callPlayer('getPlaylist')\n      if (loop && !isPlaylist) {\n        this.play() // Only loop manually if not playing a playlist\n      }\n      onEnded()\n    }\n    if (data === CUED) onReady()\n  }\n  play () {\n    this.callPlayer('playVideo')\n  }\n  pause () {\n    this.callPlayer('pauseVideo')\n  }\n  stop () {\n    if (!document.body.contains(this.callPlayer('getIframe'))) return\n    this.callPlayer('stopVideo')\n  }\n  seekTo (amount) {\n    this.callPlayer('seekTo', amount)\n    if (!this.props.playing) {\n      this.pause()\n    }\n  }\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction * 100)\n  }\n  mute = () => {\n    this.callPlayer('mute')\n  }\n  unmute = () => {\n    this.callPlayer('unMute')\n  }\n  setPlaybackRate (rate) {\n    this.callPlayer('setPlaybackRate', rate)\n  }\n  setLoop (loop) {\n    this.callPlayer('setLoop', loop)\n  }\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n  getSecondsLoaded () {\n    return this.callPlayer('getVideoLoadedFraction') * this.getDuration()\n  }\n  ref = container => {\n    this.container = container\n  }\n  render () {\n    const style = {\n      width: '100%',\n      height: '100%',\n      ...this.props.style\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}\n\nexport default createSinglePlayer(YouTube)\n"]},"metadata":{},"sourceType":"module"}